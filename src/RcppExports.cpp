// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gradient0
NumericMatrix gradient0(NumericMatrix P_, NumericMatrix scrutinA, NumericMatrix scrutinB);
RcppExport SEXP _anelex_gradient0(SEXP P_SEXP, SEXP scrutinASEXP, SEXP scrutinBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P_(P_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinA(scrutinASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinB(scrutinBSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient0(P_, scrutinA, scrutinB));
    return rcpp_result_gen;
END_RCPP
}
// gradient
NumericMatrix gradient(NumericMatrix P_, NumericMatrix scrutinA, NumericMatrix scrutinB, int nThreads);
RcppExport SEXP _anelex_gradient(SEXP P_SEXP, SEXP scrutinASEXP, SEXP scrutinBSEXP, SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P_(P_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinA(scrutinASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinB(scrutinBSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient(P_, scrutinA, scrutinB, nThreads));
    return rcpp_result_gen;
END_RCPP
}
// gradient2
NumericMatrix gradient2(NumericMatrix P_, NumericMatrix scrutinA, NumericMatrix scrutinB, int nThreads);
RcppExport SEXP _anelex_gradient2(SEXP P_SEXP, SEXP scrutinASEXP, SEXP scrutinBSEXP, SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P_(P_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinA(scrutinASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinB(scrutinBSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient2(P_, scrutinA, scrutinB, nThreads));
    return rcpp_result_gen;
END_RCPP
}
// likelihood
double likelihood(NumericMatrix P_, NumericMatrix scrutinA, NumericMatrix scrutinB, int nThreads);
RcppExport SEXP _anelex_likelihood(SEXP P_SEXP, SEXP scrutinASEXP, SEXP scrutinBSEXP, SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P_(P_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinA(scrutinASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinB(scrutinBSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(P_, scrutinA, scrutinB, nThreads));
    return rcpp_result_gen;
END_RCPP
}
// likelihood2
double likelihood2(NumericMatrix P_, NumericMatrix scrutinA, NumericMatrix scrutinB, int nThreads);
RcppExport SEXP _anelex_likelihood2(SEXP P_SEXP, SEXP scrutinASEXP, SEXP scrutinBSEXP, SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P_(P_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinA(scrutinASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scrutinB(scrutinBSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood2(P_, scrutinA, scrutinB, nThreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_anelex_gradient0", (DL_FUNC) &_anelex_gradient0, 3},
    {"_anelex_gradient", (DL_FUNC) &_anelex_gradient, 4},
    {"_anelex_gradient2", (DL_FUNC) &_anelex_gradient2, 4},
    {"_anelex_likelihood", (DL_FUNC) &_anelex_likelihood, 4},
    {"_anelex_likelihood2", (DL_FUNC) &_anelex_likelihood2, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_anelex(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
